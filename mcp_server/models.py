# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:10:58+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class GoogleCloudChannelV1ActivateEntitlementRequest(BaseModel):
    requestId: Optional[str] = Field(
        None,
        description="Optional. You can specify an optional unique request ID, and if you need to retry your request, the server will know to ignore the request if it's complete. For example, you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if it received the original operation with the same request ID. If it did, it will ignore the second request. The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122) with the exception that zero UUID is not supported (`00000000-0000-0000-0000-000000000000`).",
    )


class GoogleCloudChannelV1AdminUser(BaseModel):
    email: Optional[str] = Field(None, description='Primary email of the admin user.')
    familyName: Optional[str] = Field(
        None, description='Family name of the admin user.'
    )
    givenName: Optional[str] = Field(None, description='Given name of the admin user.')


class GoogleCloudChannelV1AssociationInfo(BaseModel):
    baseEntitlement: Optional[str] = Field(
        None,
        description='The name of the base entitlement, for which this entitlement is an add-on.',
    )


class GoogleCloudChannelV1CancelEntitlementRequest(BaseModel):
    requestId: Optional[str] = Field(
        None,
        description="Optional. You can specify an optional unique request ID, and if you need to retry your request, the server will know to ignore the request if it's complete. For example, you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if it received the original operation with the same request ID. If it did, it will ignore the second request. The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122) with the exception that zero UUID is not supported (`00000000-0000-0000-0000-000000000000`).",
    )


class LinkState(Enum):
    CHANNEL_PARTNER_LINK_STATE_UNSPECIFIED = 'CHANNEL_PARTNER_LINK_STATE_UNSPECIFIED'
    INVITED = 'INVITED'
    ACTIVE = 'ACTIVE'
    REVOKED = 'REVOKED'
    SUSPENDED = 'SUSPENDED'


class GoogleCloudChannelV1CheckCloudIdentityAccountsExistRequest(BaseModel):
    domain: Optional[str] = Field(
        None,
        description='Required. Domain to fetch for Cloud Identity account customer.',
    )


class GoogleCloudChannelV1CloudIdentityCustomerAccount(BaseModel):
    customerCloudIdentityId: Optional[str] = Field(
        None, description='If existing = true, the Cloud Identity ID of the customer.'
    )
    customerName: Optional[str] = Field(
        None,
        description='If owned = true, the name of the customer that owns the Cloud Identity account. Customer_name uses the format: accounts/{account_id}/customers/{customer_id}',
    )
    existing: Optional[bool] = Field(
        None,
        description='Returns true if a Cloud Identity account exists for a specific domain.',
    )
    owned: Optional[bool] = Field(
        None,
        description='Returns true if the Cloud Identity account is associated with a customer of the Channel Services partner.',
    )


class CustomerType(Enum):
    CUSTOMER_TYPE_UNSPECIFIED = 'CUSTOMER_TYPE_UNSPECIFIED'
    DOMAIN = 'DOMAIN'
    TEAM = 'TEAM'


class DataType(Enum):
    DATA_TYPE_UNSPECIFIED = 'DATA_TYPE_UNSPECIFIED'
    STRING = 'STRING'
    INT = 'INT'
    DECIMAL = 'DECIMAL'
    MONEY = 'MONEY'
    DATE = 'DATE'
    DATE_TIME = 'DATE_TIME'


class GoogleCloudChannelV1Column(BaseModel):
    columnId: Optional[str] = Field(
        None,
        description='The unique name of the column (for example, customer_domain, channel_partner, customer_cost). You can use column IDs in RunReportJobRequest.filter. To see all reports and their columns, call CloudChannelReportsService.ListReports.',
    )
    dataType: Optional[DataType] = Field(
        None, description='The type of the values for this column.'
    )
    displayName: Optional[str] = Field(None, description="The column's display name.")


class RebillingBasis(Enum):
    REBILLING_BASIS_UNSPECIFIED = 'REBILLING_BASIS_UNSPECIFIED'
    COST_AT_LIST = 'COST_AT_LIST'
    DIRECT_CUSTOMER_COST = 'DIRECT_CUSTOMER_COST'


class GoogleCloudChannelV1ContactInfo(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description="Output only. The customer account contact's display name, formatted as a combination of the customer's first and last name.",
    )
    email: Optional[str] = Field(
        None,
        description="The customer account's contact email. Required for entitlements that create admin.google.com accounts, and serves as the customer's username for those accounts. Use this email to invite Team customers.",
    )
    firstName: Optional[str] = Field(
        None,
        description="The customer account contact's first name. Optional for Team customers.",
    )
    lastName: Optional[str] = Field(
        None,
        description="The customer account contact's last name. Optional for Team customers.",
    )
    phone: Optional[str] = Field(
        None, description="The customer account's contact phone number."
    )
    title: Optional[str] = Field(
        None, description="Optional. The customer account contact's job title."
    )


class AllowedCustomerType(Enum):
    CUSTOMER_TYPE_UNSPECIFIED = 'CUSTOMER_TYPE_UNSPECIFIED'
    DOMAIN = 'DOMAIN'
    TEAM = 'TEAM'


class PromotionalOrderType(Enum):
    PROMOTIONAL_TYPE_UNSPECIFIED = 'PROMOTIONAL_TYPE_UNSPECIFIED'
    NEW_UPGRADE = 'NEW_UPGRADE'
    TRANSFER = 'TRANSFER'
    PROMOTION_SWITCH = 'PROMOTION_SWITCH'


class GoogleCloudChannelV1CustomerConstraints(BaseModel):
    allowedCustomerTypes: Optional[List[AllowedCustomerType]] = Field(
        None, description='Allowed Customer Type.'
    )
    allowedRegions: Optional[List[str]] = Field(
        None, description='Allowed geographical regions of the customer.'
    )
    promotionalOrderTypes: Optional[List[PromotionalOrderType]] = Field(
        None,
        description='Allowed Promotional Order Type. Present for Promotional offers.',
    )


class EventType(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    PRIMARY_DOMAIN_CHANGED = 'PRIMARY_DOMAIN_CHANGED'
    PRIMARY_DOMAIN_VERIFIED = 'PRIMARY_DOMAIN_VERIFIED'


class GoogleCloudChannelV1CustomerEvent(BaseModel):
    customer: Optional[str] = Field(
        None,
        description='Resource name of the customer. Format: accounts/{account_id}/customers/{customer_id}',
    )
    eventType: Optional[EventType] = Field(
        None, description='Type of event which happened on the customer.'
    )


class InstituteSize(Enum):
    INSTITUTE_SIZE_UNSPECIFIED = 'INSTITUTE_SIZE_UNSPECIFIED'
    SIZE_1_100 = 'SIZE_1_100'
    SIZE_101_500 = 'SIZE_101_500'
    SIZE_501_1000 = 'SIZE_501_1000'
    SIZE_1001_2000 = 'SIZE_1001_2000'
    SIZE_2001_5000 = 'SIZE_2001_5000'
    SIZE_5001_10000 = 'SIZE_5001_10000'
    SIZE_10001_OR_MORE = 'SIZE_10001_OR_MORE'


class InstituteType(Enum):
    INSTITUTE_TYPE_UNSPECIFIED = 'INSTITUTE_TYPE_UNSPECIFIED'
    K12 = 'K12'
    UNIVERSITY = 'UNIVERSITY'


class GoogleCloudChannelV1EduData(BaseModel):
    instituteSize: Optional[InstituteSize] = Field(
        None, description='Size of the institute.'
    )
    instituteType: Optional[InstituteType] = Field(
        None, description='Designated institute type of customer.'
    )
    website: Optional[str] = Field(
        None, description="Web address for the edu customer's institution."
    )


class ProvisioningState(Enum):
    PROVISIONING_STATE_UNSPECIFIED = 'PROVISIONING_STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    SUSPENDED = 'SUSPENDED'


class SuspensionReason(Enum):
    SUSPENSION_REASON_UNSPECIFIED = 'SUSPENSION_REASON_UNSPECIFIED'
    RESELLER_INITIATED = 'RESELLER_INITIATED'
    TRIAL_ENDED = 'TRIAL_ENDED'
    RENEWAL_WITH_TYPE_CANCEL = 'RENEWAL_WITH_TYPE_CANCEL'
    PENDING_TOS_ACCEPTANCE = 'PENDING_TOS_ACCEPTANCE'
    OTHER = 'OTHER'


class ActivationReason(Enum):
    ACTIVATION_REASON_UNSPECIFIED = 'ACTIVATION_REASON_UNSPECIFIED'
    RESELLER_REVOKED_SUSPENSION = 'RESELLER_REVOKED_SUSPENSION'
    CUSTOMER_ACCEPTED_PENDING_TOS = 'CUSTOMER_ACCEPTED_PENDING_TOS'
    RENEWAL_SETTINGS_CHANGED = 'RENEWAL_SETTINGS_CHANGED'
    OTHER_ACTIVATION_REASON = 'OTHER_ACTIVATION_REASON'


class CancellationReason(Enum):
    CANCELLATION_REASON_UNSPECIFIED = 'CANCELLATION_REASON_UNSPECIFIED'
    SERVICE_TERMINATED = 'SERVICE_TERMINATED'
    RELATIONSHIP_ENDED = 'RELATIONSHIP_ENDED'
    PARTIAL_TRANSFER = 'PARTIAL_TRANSFER'


class ChangeType(Enum):
    CHANGE_TYPE_UNSPECIFIED = 'CHANGE_TYPE_UNSPECIFIED'
    CREATED = 'CREATED'
    PRICE_PLAN_SWITCHED = 'PRICE_PLAN_SWITCHED'
    COMMITMENT_CHANGED = 'COMMITMENT_CHANGED'
    RENEWED = 'RENEWED'
    SUSPENDED = 'SUSPENDED'
    ACTIVATED = 'ACTIVATED'
    CANCELLED = 'CANCELLED'
    SKU_CHANGED = 'SKU_CHANGED'
    RENEWAL_SETTING_CHANGED = 'RENEWAL_SETTING_CHANGED'
    PAID_SUBSCRIPTION_STARTED = 'PAID_SUBSCRIPTION_STARTED'
    LICENSE_CAP_CHANGED = 'LICENSE_CAP_CHANGED'
    SUSPENSION_DETAILS_CHANGED = 'SUSPENSION_DETAILS_CHANGED'
    TRIAL_END_DATE_EXTENDED = 'TRIAL_END_DATE_EXTENDED'
    TRIAL_STARTED = 'TRIAL_STARTED'


class OperatorType(Enum):
    OPERATOR_TYPE_UNSPECIFIED = 'OPERATOR_TYPE_UNSPECIFIED'
    CUSTOMER_SERVICE_REPRESENTATIVE = 'CUSTOMER_SERVICE_REPRESENTATIVE'
    SYSTEM = 'SYSTEM'
    CUSTOMER = 'CUSTOMER'
    RESELLER = 'RESELLER'


class EventType1(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    CREATED = 'CREATED'
    PRICE_PLAN_SWITCHED = 'PRICE_PLAN_SWITCHED'
    COMMITMENT_CHANGED = 'COMMITMENT_CHANGED'
    RENEWED = 'RENEWED'
    SUSPENDED = 'SUSPENDED'
    ACTIVATED = 'ACTIVATED'
    CANCELLED = 'CANCELLED'
    SKU_CHANGED = 'SKU_CHANGED'
    RENEWAL_SETTING_CHANGED = 'RENEWAL_SETTING_CHANGED'
    PAID_SERVICE_STARTED = 'PAID_SERVICE_STARTED'
    LICENSE_ASSIGNMENT_CHANGED = 'LICENSE_ASSIGNMENT_CHANGED'
    LICENSE_CAP_CHANGED = 'LICENSE_CAP_CHANGED'


class GoogleCloudChannelV1EntitlementEvent(BaseModel):
    entitlement: Optional[str] = Field(
        None,
        description='Resource name of an entitlement of the form: accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}',
    )
    eventType: Optional[EventType1] = Field(
        None, description='Type of event which happened on the entitlement.'
    )


class GoogleCloudChannelV1FetchReportResultsRequest(BaseModel):
    pageSize: Optional[int] = Field(
        None,
        description="Optional. Requested page size of the report. The server may return fewer results than requested. If you don't specify a page size, the server uses a sensible default (may change over time). The maximum value is 30,000; the server will change larger values to 30,000.",
    )
    pageToken: Optional[str] = Field(
        None,
        description='Optional. A token that specifies a page of results beyond the first page. Obtained through FetchReportResultsResponse.next_page_token of the previous CloudChannelReportsService.FetchReportResults call.',
    )


class GoogleCloudChannelV1ImportCustomerRequest(BaseModel):
    authToken: Optional[str] = Field(
        None,
        description='Optional. The super admin of the resold customer generates this token to authorize a reseller to access their Cloud Identity and purchase entitlements on their behalf. You can omit this token after authorization. See https://support.google.com/a/answer/7643790 for more details.',
    )
    channelPartnerId: Optional[str] = Field(
        None,
        description="Optional. Cloud Identity ID of a channel partner who will be the direct reseller for the customer's order. This field is required for 2-tier transfer scenarios and can be provided via the request Parent binding as well.",
    )
    cloudIdentityId: Optional[str] = Field(
        None, description="Required. Customer's Cloud Identity ID"
    )
    customer: Optional[str] = Field(
        None,
        description='Optional. Specifies the customer that will receive imported Cloud Identity information. Format: accounts/{account_id}/customers/{customer_id}',
    )
    domain: Optional[str] = Field(None, description='Required. Customer domain.')
    overwriteIfExists: Optional[bool] = Field(
        None,
        description='Required. Choose to overwrite an existing customer if found. This must be set to true if there is an existing customer with a conflicting region code or domain.',
    )


class GoogleCloudChannelV1ListSubscribersResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    serviceAccounts: Optional[List[str]] = Field(
        None,
        description='List of service accounts which have subscriber access to the topic.',
    )
    topic: Optional[str] = Field(
        None, description='Name of the topic registered with the reseller.'
    )


class GoogleCloudChannelV1ListTransferableOffersRequest(BaseModel):
    cloudIdentityId: Optional[str] = Field(
        None, description="Customer's Cloud Identity ID"
    )
    customerName: Optional[str] = Field(
        None,
        description='A reseller should create a customer and use the resource name of that customer here.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Optional. The BCP-47 language code. For example, "en-US". The response will localize in the corresponding language code, if specified. The default value is "en-US".',
    )
    pageSize: Optional[int] = Field(
        None,
        description='Requested page size. Server might return fewer results than requested. If unspecified, returns at most 100 offers. The maximum value is 1000; the server will coerce values above 1000.',
    )
    pageToken: Optional[str] = Field(
        None,
        description='A token for a page of results other than the first page. Obtained using ListTransferableOffersResponse.next_page_token of the previous CloudChannelService.ListTransferableOffers call.',
    )
    sku: Optional[str] = Field(
        None, description='Required. The SKU to look up Offers for.'
    )


class GoogleCloudChannelV1ListTransferableSkusRequest(BaseModel):
    authToken: Optional[str] = Field(
        None,
        description='Optional. The super admin of the resold customer generates this token to authorize a reseller to access their Cloud Identity and purchase entitlements on their behalf. You can omit this token after authorization. See https://support.google.com/a/answer/7643790 for more details.',
    )
    cloudIdentityId: Optional[str] = Field(
        None, description="Customer's Cloud Identity ID"
    )
    customerName: Optional[str] = Field(
        None,
        description='A reseller is required to create a customer and use the resource name of the created customer here. Customer_name uses the format: accounts/{account_id}/customers/{customer_id}',
    )
    languageCode: Optional[str] = Field(
        None,
        description='The BCP-47 language code. For example, "en-US". The response will localize in the corresponding language code, if specified. The default value is "en-US". Optional.',
    )
    pageSize: Optional[int] = Field(
        None,
        description='The requested page size. Server might return fewer results than requested. If unspecified, returns at most 100 SKUs. The maximum value is 1000; the server will coerce values above 1000. Optional.',
    )
    pageToken: Optional[str] = Field(
        None,
        description='A token for a page of results other than the first page. Obtained using ListTransferableSkusResponse.next_page_token of the previous CloudChannelService.ListTransferableSkus call. Optional.',
    )


class Type(Enum):
    MEDIA_TYPE_UNSPECIFIED = 'MEDIA_TYPE_UNSPECIFIED'
    MEDIA_TYPE_IMAGE = 'MEDIA_TYPE_IMAGE'


class GoogleCloudChannelV1Media(BaseModel):
    content: Optional[str] = Field(None, description='URL of the media.')
    title: Optional[str] = Field(None, description='Title of the media.')
    type: Optional[Type] = Field(None, description='Type of the media.')


class OperationType(Enum):
    OPERATION_TYPE_UNSPECIFIED = 'OPERATION_TYPE_UNSPECIFIED'
    CREATE_ENTITLEMENT = 'CREATE_ENTITLEMENT'
    CHANGE_RENEWAL_SETTINGS = 'CHANGE_RENEWAL_SETTINGS'
    START_PAID_SERVICE = 'START_PAID_SERVICE'
    ACTIVATE_ENTITLEMENT = 'ACTIVATE_ENTITLEMENT'
    SUSPEND_ENTITLEMENT = 'SUSPEND_ENTITLEMENT'
    CANCEL_ENTITLEMENT = 'CANCEL_ENTITLEMENT'
    TRANSFER_ENTITLEMENTS = 'TRANSFER_ENTITLEMENTS'
    TRANSFER_ENTITLEMENTS_TO_GOOGLE = 'TRANSFER_ENTITLEMENTS_TO_GOOGLE'
    CHANGE_OFFER = 'CHANGE_OFFER'
    CHANGE_PARAMETERS = 'CHANGE_PARAMETERS'
    PROVISION_CLOUD_IDENTITY = 'PROVISION_CLOUD_IDENTITY'


class GoogleCloudChannelV1OperationMetadata(BaseModel):
    operationType: Optional[OperationType] = Field(
        None, description='The RPC that initiated this Long Running Operation.'
    )


class ParameterType(Enum):
    PARAMETER_TYPE_UNSPECIFIED = 'PARAMETER_TYPE_UNSPECIFIED'
    INT64 = 'INT64'
    STRING = 'STRING'
    DOUBLE = 'DOUBLE'


class PeriodType(Enum):
    PERIOD_TYPE_UNSPECIFIED = 'PERIOD_TYPE_UNSPECIFIED'
    DAY = 'DAY'
    MONTH = 'MONTH'
    YEAR = 'YEAR'


class GoogleCloudChannelV1Period(BaseModel):
    duration: Optional[int] = Field(
        None, description='Total duration of Period Type defined.'
    )
    periodType: Optional[PeriodType] = Field(None, description='Period Type.')


class PaymentPlan(Enum):
    PAYMENT_PLAN_UNSPECIFIED = 'PAYMENT_PLAN_UNSPECIFIED'
    COMMITMENT = 'COMMITMENT'
    FLEXIBLE = 'FLEXIBLE'
    FREE = 'FREE'
    TRIAL = 'TRIAL'
    OFFLINE = 'OFFLINE'


class PaymentType(Enum):
    PAYMENT_TYPE_UNSPECIFIED = 'PAYMENT_TYPE_UNSPECIFIED'
    PREPAY = 'PREPAY'
    POSTPAY = 'POSTPAY'


class GoogleCloudChannelV1Plan(BaseModel):
    billingAccount: Optional[str] = Field(
        None,
        description='Reseller Billing account to charge after an offer transaction. Only present for Google Cloud Platform offers.',
    )
    paymentCycle: Optional[GoogleCloudChannelV1Period] = Field(
        None,
        description='Describes how frequently the reseller will be billed, such as once per month.',
    )
    paymentPlan: Optional[PaymentPlan] = Field(
        None, description='Describes how a reseller will be billed.'
    )
    paymentType: Optional[PaymentType] = Field(
        None, description='Specifies when the payment needs to happen.'
    )
    trialPeriod: Optional[GoogleCloudChannelV1Period] = Field(
        None,
        description='Present for Offers with a trial period. For trial-only Offers, a paid service needs to start before the trial period ends for continued service. For Regular Offers with a trial period, the regular pricing goes into effect when trial period ends, or if paid service is started before the end of the trial period.',
    )


class ResourceType(Enum):
    RESOURCE_TYPE_UNSPECIFIED = 'RESOURCE_TYPE_UNSPECIFIED'
    SEAT = 'SEAT'
    MAU = 'MAU'
    GB = 'GB'
    LICENSED_USER = 'LICENSED_USER'
    MINUTES = 'MINUTES'
    IAAS_USAGE = 'IAAS_USAGE'
    SUBSCRIPTION = 'SUBSCRIPTION'


class GoogleCloudChannelV1ProvisionedService(BaseModel):
    productId: Optional[str] = Field(
        None,
        description='Output only. The product pertaining to the provisioning resource as specified in the Offer.',
    )
    provisioningId: Optional[str] = Field(
        None,
        description='Output only. Provisioning ID of the entitlement. For Google Workspace, this is the underlying Subscription ID. For Google Cloud Platform, this is the Billing Account ID of the billing subaccount."',
    )
    skuId: Optional[str] = Field(
        None,
        description='Output only. The SKU pertaining to the provisioning resource as specified in the Offer.',
    )


class GoogleCloudChannelV1RegisterSubscriberRequest(BaseModel):
    serviceAccount: Optional[str] = Field(
        None,
        description='Required. Service account that provides subscriber access to the registered topic.',
    )


class GoogleCloudChannelV1RegisterSubscriberResponse(BaseModel):
    topic: Optional[str] = Field(
        None, description='Name of the topic the subscriber will listen to.'
    )


class GoogleCloudChannelV1RenewalSettings(BaseModel):
    enableRenewal: Optional[bool] = Field(
        None, description='If false, the plan will be completed at the end date.'
    )
    paymentCycle: Optional[GoogleCloudChannelV1Period] = Field(
        None,
        description='Describes how frequently the reseller will be billed, such as once per month.',
    )
    paymentPlan: Optional[PaymentPlan] = Field(
        None, description='Describes how a reseller will be billed.'
    )
    resizeUnitCount: Optional[bool] = Field(
        None,
        description='If true and enable_renewal = true, the unit (for example seats or licenses) will be set to the number of active units at renewal time.',
    )


class GoogleCloudChannelV1Report(BaseModel):
    columns: Optional[List[GoogleCloudChannelV1Column]] = Field(
        None,
        description='The list of columns included in the report. This defines the schema of the report results.',
    )
    description: Optional[str] = Field(
        None,
        description='A description of other aspects of the report, such as the products it supports.',
    )
    displayName: Optional[str] = Field(
        None, description='A human-readable name for this report.'
    )
    name: Optional[str] = Field(
        None,
        description="Required. The report's resource name. Specifies the account and report used to generate report data. The report_id identifier is a UID (for example, `613bf59q`). Name uses the format: accounts/{account_id}/reports/{report_id}",
    )


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    STARTED = 'STARTED'
    WRITING = 'WRITING'
    AVAILABLE = 'AVAILABLE'
    FAILED = 'FAILED'


class GoogleCloudChannelV1ReportStatus(BaseModel):
    endTime: Optional[str] = Field(
        None, description="The report generation's completion time."
    )
    startTime: Optional[str] = Field(
        None, description="The report generation's start time."
    )
    state: Optional[State] = Field(
        None, description='The current state of the report generation process.'
    )


class GoogleCloudChannelV1RepricingConfigChannelPartnerGranularity(BaseModel):
    pass


class GoogleCloudChannelV1RepricingConfigEntitlementGranularity(BaseModel):
    entitlement: Optional[str] = Field(
        None,
        description='Resource name of the entitlement. Format: accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}',
    )


class GoogleCloudChannelV1SkuGroupCondition(BaseModel):
    skuGroup: Optional[str] = Field(
        None,
        description='Specifies a SKU group (https://cloud.google.com/skus/sku-groups). Resource name of SKU group. Format: accounts/{account}/skuGroups/{sku_group}. Example: "accounts/C01234/skuGroups/3d50fd57-3157-4577-a5a9-a219b8490041".',
    )


class GoogleCloudChannelV1StartPaidServiceRequest(BaseModel):
    requestId: Optional[str] = Field(
        None,
        description="Optional. You can specify an optional unique request ID, and if you need to retry your request, the server will know to ignore the request if it's complete. For example, you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if it received the original operation with the same request ID. If it did, it will ignore the second request. The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122) with the exception that zero UUID is not supported (`00000000-0000-0000-0000-000000000000`).",
    )


class GoogleCloudChannelV1SubscriberEvent(BaseModel):
    customerEvent: Optional[GoogleCloudChannelV1CustomerEvent] = Field(
        None, description='Customer event sent as part of Pub/Sub event to partners.'
    )
    entitlementEvent: Optional[GoogleCloudChannelV1EntitlementEvent] = Field(
        None, description='Entitlement event sent as part of Pub/Sub event to partners.'
    )


class GoogleCloudChannelV1SuspendEntitlementRequest(BaseModel):
    requestId: Optional[str] = Field(
        None,
        description="Optional. You can specify an optional unique request ID, and if you need to retry your request, the server will know to ignore the request if it's complete. For example, you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if it received the original operation with the same request ID. If it did, it will ignore the second request. The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122) with the exception that zero UUID is not supported (`00000000-0000-0000-0000-000000000000`).",
    )


class IneligibilityReason(Enum):
    REASON_UNSPECIFIED = 'REASON_UNSPECIFIED'
    PENDING_TOS_ACCEPTANCE = 'PENDING_TOS_ACCEPTANCE'
    SKU_NOT_ELIGIBLE = 'SKU_NOT_ELIGIBLE'
    SKU_SUSPENDED = 'SKU_SUSPENDED'


class GoogleCloudChannelV1TransferEligibility(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Localized description if reseller is not eligible to transfer the SKU.',
    )
    ineligibilityReason: Optional[IneligibilityReason] = Field(
        None, description='Specified the reason for ineligibility.'
    )
    isEligible: Optional[bool] = Field(
        None, description='Whether reseller is eligible to transfer the SKU.'
    )


class GoogleCloudChannelV1TrialSettings(BaseModel):
    endTime: Optional[str] = Field(
        None,
        description='Date when the trial ends. The value is in milliseconds using the UNIX Epoch format. See an example [Epoch converter](https://www.epochconverter.com).',
    )
    trial: Optional[bool] = Field(
        None,
        description='Determines if the entitlement is in a trial or not: * `true` - The entitlement is in trial. * `false` - The entitlement is not in trial.',
    )


class GoogleCloudChannelV1UnregisterSubscriberRequest(BaseModel):
    serviceAccount: Optional[str] = Field(
        None,
        description='Required. Service account to unregister from subscriber access to the topic.',
    )


class GoogleCloudChannelV1UnregisterSubscriberResponse(BaseModel):
    topic: Optional[str] = Field(
        None,
        description='Name of the topic the service account subscriber access was removed from.',
    )


class GoogleCloudChannelV1Value(BaseModel):
    boolValue: Optional[bool] = Field(None, description='Represents a boolean value.')
    doubleValue: Optional[float] = Field(None, description='Represents a double value.')
    int64Value: Optional[str] = Field(None, description='Represents an int64 value.')
    protoValue: Optional[Dict[str, Any]] = Field(
        None, description="Represents an 'Any' proto value."
    )
    stringValue: Optional[str] = Field(None, description='Represents a string value.')


class GoogleCloudChannelV1alpha1AssociationInfo(BaseModel):
    baseEntitlement: Optional[str] = Field(
        None,
        description='The name of the base entitlement, for which this entitlement is an add-on.',
    )


class EventType2(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    LINK_STATE_CHANGED = 'LINK_STATE_CHANGED'
    PARTNER_ADVANTAGE_INFO_CHANGED = 'PARTNER_ADVANTAGE_INFO_CHANGED'


class GoogleCloudChannelV1alpha1ChannelPartnerEvent(BaseModel):
    channelPartner: Optional[str] = Field(
        None,
        description='Resource name for the Channel Partner Link. Channel_partner uses the format: accounts/{account_id}/channelPartnerLinks/{channel_partner_id}',
    )
    eventType: Optional[EventType2] = Field(
        None, description='Type of event performed on the Channel Partner.'
    )


class GoogleCloudChannelV1alpha1Column(BaseModel):
    columnId: Optional[str] = Field(
        None,
        description='The unique name of the column (for example, customer_domain, channel_partner, customer_cost). You can use column IDs in RunReportJobRequest.filter. To see all reports and their columns, call CloudChannelReportsService.ListReports.',
    )
    dataType: Optional[DataType] = Field(
        None, description='The type of the values for this column.'
    )
    displayName: Optional[str] = Field(None, description="The column's display name.")


class EventType3(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    PRIMARY_DOMAIN_CHANGED = 'PRIMARY_DOMAIN_CHANGED'
    PRIMARY_DOMAIN_VERIFIED = 'PRIMARY_DOMAIN_VERIFIED'


class GoogleCloudChannelV1alpha1CustomerEvent(BaseModel):
    customer: Optional[str] = Field(
        None,
        description='Resource name of the customer. Format: accounts/{account_id}/customers/{customer_id}',
    )
    eventType: Optional[EventType3] = Field(
        None, description='Type of event which happened on the customer.'
    )


class ProvisioningState1(Enum):
    PROVISIONING_STATE_UNSPECIFIED = 'PROVISIONING_STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    CANCELED = 'CANCELED'
    COMPLETE = 'COMPLETE'
    PENDING = 'PENDING'
    SUSPENDED = 'SUSPENDED'


class EventType4(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    CREATED = 'CREATED'
    PRICE_PLAN_SWITCHED = 'PRICE_PLAN_SWITCHED'
    COMMITMENT_CHANGED = 'COMMITMENT_CHANGED'
    RENEWED = 'RENEWED'
    SUSPENDED = 'SUSPENDED'
    ACTIVATED = 'ACTIVATED'
    CANCELLED = 'CANCELLED'
    SKU_CHANGED = 'SKU_CHANGED'
    RENEWAL_SETTING_CHANGED = 'RENEWAL_SETTING_CHANGED'
    PAID_SERVICE_STARTED = 'PAID_SERVICE_STARTED'
    LICENSE_ASSIGNMENT_CHANGED = 'LICENSE_ASSIGNMENT_CHANGED'
    LICENSE_CAP_CHANGED = 'LICENSE_CAP_CHANGED'


class GoogleCloudChannelV1alpha1EntitlementEvent(BaseModel):
    entitlement: Optional[str] = Field(
        None,
        description='Resource name of an entitlement of the form: accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}',
    )
    eventType: Optional[EventType4] = Field(
        None, description='Type of event which happened on the entitlement.'
    )


class OperationType1(Enum):
    OPERATION_TYPE_UNSPECIFIED = 'OPERATION_TYPE_UNSPECIFIED'
    CREATE_ENTITLEMENT = 'CREATE_ENTITLEMENT'
    CHANGE_QUANTITY = 'CHANGE_QUANTITY'
    CHANGE_RENEWAL_SETTINGS = 'CHANGE_RENEWAL_SETTINGS'
    CHANGE_PLAN = 'CHANGE_PLAN'
    START_PAID_SERVICE = 'START_PAID_SERVICE'
    CHANGE_SKU = 'CHANGE_SKU'
    ACTIVATE_ENTITLEMENT = 'ACTIVATE_ENTITLEMENT'
    SUSPEND_ENTITLEMENT = 'SUSPEND_ENTITLEMENT'
    CANCEL_ENTITLEMENT = 'CANCEL_ENTITLEMENT'
    TRANSFER_ENTITLEMENTS = 'TRANSFER_ENTITLEMENTS'
    TRANSFER_ENTITLEMENTS_TO_GOOGLE = 'TRANSFER_ENTITLEMENTS_TO_GOOGLE'
    CHANGE_OFFER = 'CHANGE_OFFER'
    CHANGE_PARAMETERS = 'CHANGE_PARAMETERS'
    PROVISION_CLOUD_IDENTITY = 'PROVISION_CLOUD_IDENTITY'


class GoogleCloudChannelV1alpha1OperationMetadata(BaseModel):
    operationType: Optional[OperationType1] = Field(
        None, description='The RPC that initiated this Long Running Operation.'
    )


class GoogleCloudChannelV1alpha1Period(BaseModel):
    duration: Optional[int] = Field(
        None, description='Total duration of Period Type defined.'
    )
    periodType: Optional[PeriodType] = Field(None, description='Period Type.')


class GoogleCloudChannelV1alpha1ProvisionedService(BaseModel):
    productId: Optional[str] = Field(
        None,
        description='Output only. The product pertaining to the provisioning resource as specified in the Offer.',
    )
    provisioningId: Optional[str] = Field(
        None,
        description='Output only. Provisioning ID of the entitlement. For Google Workspace, this is the underlying Subscription ID. For Google Cloud Platform, this is the Billing Account ID of the billing subaccount."',
    )
    skuId: Optional[str] = Field(
        None,
        description='Output only. The SKU pertaining to the provisioning resource as specified in the Offer.',
    )


class PaymentOption(Enum):
    PAYMENT_OPTION_UNSPECIFIED = 'PAYMENT_OPTION_UNSPECIFIED'
    ANNUAL = 'ANNUAL'
    MONTHLY = 'MONTHLY'


class GoogleCloudChannelV1alpha1RenewalSettings(BaseModel):
    disableCommitment: Optional[bool] = Field(
        None,
        description='If true, disables commitment-based offer on renewal and switches to flexible or pay as you go. Deprecated: Use `payment_plan` instead.',
    )
    enableRenewal: Optional[bool] = Field(
        None, description='If false, the plan will be completed at the end date.'
    )
    paymentCycle: Optional[GoogleCloudChannelV1alpha1Period] = Field(
        None,
        description='Describes how frequently the reseller will be billed, such as once per month.',
    )
    paymentOption: Optional[PaymentOption] = Field(
        None,
        description='Set if enable_renewal=true. Deprecated: Use `payment_cycle` instead.',
    )
    paymentPlan: Optional[PaymentPlan] = Field(
        None, description='Describes how a reseller will be billed.'
    )
    resizeUnitCount: Optional[bool] = Field(
        None,
        description='If true and enable_renewal = true, the unit (for example seats or licenses) will be set to the number of active units at renewal time.',
    )
    scheduledRenewalOffer: Optional[str] = Field(
        None,
        description='Output only. The offer resource name that the entitlement will renew on at the end date. Takes the form: accounts/{account_id}/offers/{offer_id}.',
    )


class GoogleCloudChannelV1alpha1Report(BaseModel):
    columns: Optional[List[GoogleCloudChannelV1alpha1Column]] = Field(
        None,
        description='The list of columns included in the report. This defines the schema of the report results.',
    )
    description: Optional[str] = Field(
        None,
        description='A description of other aspects of the report, such as the products it supports.',
    )
    displayName: Optional[str] = Field(
        None, description='A human-readable name for this report.'
    )
    name: Optional[str] = Field(
        None,
        description="Required. The report's resource name. Specifies the account and report used to generate report data. The report_id identifier is a UID (for example, `613bf59q`). Name uses the format: accounts/{account_id}/reports/{report_id}",
    )


class GoogleCloudChannelV1alpha1ReportStatus(BaseModel):
    endTime: Optional[str] = Field(
        None, description="The report generation's completion time."
    )
    startTime: Optional[str] = Field(
        None, description="The report generation's start time."
    )
    state: Optional[State] = Field(
        None, description='The current state of the report generation process.'
    )


class GoogleCloudChannelV1alpha1SubscriberEvent(BaseModel):
    channelPartnerEvent: Optional[GoogleCloudChannelV1alpha1ChannelPartnerEvent] = (
        Field(
            None,
            description='Channel Partner event sent as part of Pub/Sub event to partners.',
        )
    )
    customerEvent: Optional[GoogleCloudChannelV1alpha1CustomerEvent] = Field(
        None, description='Customer event sent as part of Pub/Sub event to partners.'
    )
    entitlementEvent: Optional[GoogleCloudChannelV1alpha1EntitlementEvent] = Field(
        None, description='Entitlement event sent as part of Pub/Sub event to partners.'
    )


class GoogleCloudChannelV1alpha1TrialSettings(BaseModel):
    endTime: Optional[str] = Field(
        None,
        description='Date when the trial ends. The value is in milliseconds using the UNIX Epoch format. See an example [Epoch converter](https://www.epochconverter.com).',
    )
    trial: Optional[bool] = Field(
        None,
        description='Determines if the entitlement is in a trial or not: * `true` - The entitlement is in trial. * `false` - The entitlement is not in trial.',
    )


class GoogleCloudChannelV1alpha1Value(BaseModel):
    boolValue: Optional[bool] = Field(None, description='Represents a boolean value.')
    doubleValue: Optional[float] = Field(None, description='Represents a double value.')
    int64Value: Optional[str] = Field(None, description='Represents an int64 value.')
    protoValue: Optional[Dict[str, Any]] = Field(
        None, description="Represents an 'Any' proto value."
    )
    stringValue: Optional[str] = Field(None, description='Represents a string value.')


class GoogleLongrunningCancelOperationRequest(BaseModel):
    pass


class GoogleProtobufEmpty(BaseModel):
    pass


class GoogleRpcStatus(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class GoogleTypeDate(BaseModel):
    day: Optional[int] = Field(
        None,
        description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
    )
    month: Optional[int] = Field(
        None,
        description='Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.',
    )
    year: Optional[int] = Field(
        None,
        description='Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.',
    )


class GoogleTypeDecimal(BaseModel):
    value: Optional[str] = Field(
        None,
        description='The decimal value, as a string. The string representation consists of an optional sign, `+` (`U+002B`) or `-` (`U+002D`), followed by a sequence of zero or more decimal digits ("the integer"), optionally followed by a fraction, optionally followed by an exponent. An empty string **should** be interpreted as `0`. The fraction consists of a decimal point followed by zero or more decimal digits. The string must contain at least one digit in either the integer or the fraction. The number formed by the sign, the integer and the fraction is referred to as the significand. The exponent consists of the character `e` (`U+0065`) or `E` (`U+0045`) followed by one or more decimal digits. Services **should** normalize decimal values before storing them by: - Removing an explicitly-provided `+` sign (`+2.5` -> `2.5`). - Replacing a zero-length integer value with `0` (`.5` -> `0.5`). - Coercing the exponent character to upper-case, with explicit sign (`2.5e8` -> `2.5E+8`). - Removing an explicitly-provided zero exponent (`2.5E0` -> `2.5`). Services **may** perform additional normalization based on its own needs and the internal decimal implementation selected, such as shifting the decimal point and exponent value together (example: `2.5E-1` <-> `0.25`). Additionally, services **may** preserve trailing zeroes in the fraction to indicate increased precision, but are not required to do so. Note that only the `.` character is supported to divide the integer and the fraction; `,` **should not** be supported regardless of locale. Additionally, thousand separators **should not** be supported. If a service does support them, values **must** be normalized. The ENBF grammar is: DecimalString = \'\' | [Sign] Significand [Exponent]; Sign = \'+\' | \'-\'; Significand = Digits \'.\' | [Digits] \'.\' Digits; Exponent = (\'e\' | \'E\') [Sign] Digits; Digits = { \'0\' | \'1\' | \'2\' | \'3\' | \'4\' | \'5\' | \'6\' | \'7\' | \'8\' | \'9\' }; Services **should** clearly document the range of supported values, the maximum supported precision (total number of digits), and, if applicable, the scale (number of digits after the decimal point), as well as how it behaves when receiving out-of-bounds values. Services **may** choose to accept values passed as input even when the value has a higher precision or scale than the service supports, and **should** round the value to fit the supported scale. Alternatively, the service **may** error with `400 Bad Request` (`INVALID_ARGUMENT` in gRPC) if precision would be lost. Services **should** error with `400 Bad Request` (`INVALID_ARGUMENT` in gRPC) if the service receives a value outside of the supported range.',
    )


class GoogleTypeMoney(BaseModel):
    currencyCode: Optional[str] = Field(
        None, description='The three-letter currency code defined in ISO 4217.'
    )
    nanos: Optional[int] = Field(
        None,
        description='Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.',
    )
    units: Optional[str] = Field(
        None,
        description='The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.',
    )


class GoogleTypePostalAddress(BaseModel):
    addressLines: Optional[List[str]] = Field(
        None,
        description='Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).',
    )
    administrativeArea: Optional[str] = Field(
        None,
        description='Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don\'t use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address\' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".',
    )
    locality: Optional[str] = Field(
        None,
        description='Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.',
    )
    organization: Optional[str] = Field(
        None, description='Optional. The name of the organization at the address.'
    )
    postalCode: Optional[str] = Field(
        None,
        description='Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).',
    )
    recipients: Optional[List[str]] = Field(
        None,
        description='Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.',
    )
    regionCode: Optional[str] = Field(
        None,
        description='Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.',
    )
    revision: Optional[int] = Field(
        None,
        description='The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.',
    )
    sortingCode: Optional[str] = Field(
        None,
        description='Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d\'Ivoire).',
    )
    sublocality: Optional[str] = Field(
        None,
        description='Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.',
    )


class GoogleTypeTimeZone(BaseModel):
    id: Optional[str] = Field(
        None, description='IANA Time Zone Database time zone, e.g. "America/New_York".'
    )
    version: Optional[str] = Field(
        None,
        description='Optional. IANA Time Zone Database version number, e.g. "2019a".',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class ChangeOfferPurchaseChangeType(Enum):
    CHANGE_TYPE_UNSPECIFIED = 'CHANGE_TYPE_UNSPECIFIED'
    UPGRADE = 'UPGRADE'
    DOWNGRADE = 'DOWNGRADE'


class Filter(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    BASIC = 'BASIC'
    FULL = 'FULL'


class View(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    BASIC = 'BASIC'
    FULL = 'FULL'


class GoogleCloudChannelV1ChangeRenewalSettingsRequest(BaseModel):
    renewalSettings: Optional[GoogleCloudChannelV1RenewalSettings] = Field(
        None, description='Required. New renewal settings.'
    )
    requestId: Optional[str] = Field(
        None,
        description="Optional. You can specify an optional unique request ID, and if you need to retry your request, the server will know to ignore the request if it's complete. For example, you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if it received the original operation with the same request ID. If it did, it will ignore the second request. The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122) with the exception that zero UUID is not supported (`00000000-0000-0000-0000-000000000000`).",
    )


class GoogleCloudChannelV1CheckCloudIdentityAccountsExistResponse(BaseModel):
    cloudIdentityAccounts: Optional[
        List[GoogleCloudChannelV1CloudIdentityCustomerAccount]
    ] = Field(
        None, description='The Cloud Identity accounts associated with the domain.'
    )


class GoogleCloudChannelV1CloudIdentityInfo(BaseModel):
    adminConsoleUri: Optional[str] = Field(
        None, description="Output only. URI of Customer's Admin console dashboard."
    )
    alternateEmail: Optional[str] = Field(None, description='The alternate email.')
    customerType: Optional[CustomerType] = Field(
        None,
        description='CustomerType indicates verification type needed for using services.',
    )
    eduData: Optional[GoogleCloudChannelV1EduData] = Field(
        None, description='Edu information about the customer.'
    )
    isDomainVerified: Optional[bool] = Field(
        None,
        description="Output only. Whether the domain is verified. This field is not returned for a Customer's cloud_identity_info resource. Partners can use the domains.get() method of the Workspace SDK's Directory API, or listen to the PRIMARY_DOMAIN_VERIFIED Pub/Sub event in to track domain verification of their resolve Workspace customers.",
    )
    languageCode: Optional[str] = Field(None, description='Language code.')
    phoneNumber: Optional[str] = Field(
        None, description='Phone number associated with the Cloud Identity.'
    )
    primaryDomain: Optional[str] = Field(
        None, description='Output only. The primary domain name.'
    )


class GoogleCloudChannelV1CommitmentSettings(BaseModel):
    endTime: Optional[str] = Field(
        None, description='Output only. Commitment end timestamp.'
    )
    renewalSettings: Optional[GoogleCloudChannelV1RenewalSettings] = Field(
        None,
        description='Optional. Renewal settings applicable for a commitment-based Offer.',
    )
    startTime: Optional[str] = Field(
        None, description='Output only. Commitment start timestamp.'
    )


class GoogleCloudChannelV1Constraints(BaseModel):
    customerConstraints: Optional[GoogleCloudChannelV1CustomerConstraints] = Field(
        None,
        description='Represents constraints required to purchase the Offer for a customer.',
    )


class GoogleCloudChannelV1Customer(BaseModel):
    alternateEmail: Optional[str] = Field(
        None,
        description='Secondary contact email. You need to provide an alternate email to create different domains if a primary contact email already exists. Users will receive a notification with credentials when you create an admin.google.com account. Secondary emails are also recovery email addresses. Alternate emails are optional when you create Team customers.',
    )
    channelPartnerId: Optional[str] = Field(
        None,
        description="Cloud Identity ID of the customer's channel partner. Populated only if a channel partner exists for this customer.",
    )
    cloudIdentityId: Optional[str] = Field(
        None,
        description="Output only. The customer's Cloud Identity ID if the customer has a Cloud Identity resource.",
    )
    cloudIdentityInfo: Optional[GoogleCloudChannelV1CloudIdentityInfo] = Field(
        None,
        description='Output only. Cloud Identity information for the customer. Populated only if a Cloud Identity account exists for this customer.',
    )
    correlationId: Optional[str] = Field(
        None,
        description='Optional. External CRM ID for the customer. Populated only if a CRM ID exists for this customer.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Time when the customer was created.'
    )
    domain: Optional[str] = Field(
        None,
        description="Required. The customer's primary domain. Must match the primary contact email's domain.",
    )
    languageCode: Optional[str] = Field(
        None,
        description='Optional. The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. Resource name of the customer. Format: accounts/{account_id}/customers/{customer_id}',
    )
    orgDisplayName: Optional[str] = Field(
        None,
        description='Required. Name of the organization that the customer entity represents.',
    )
    orgPostalAddress: Optional[GoogleTypePostalAddress] = Field(
        None,
        description="Required. The organization address for the customer. To enforce US laws and embargoes, we require a region and zip code. You must provide valid addresses for every customer. To set the customer's language, use the Customer-level language code.",
    )
    primaryContactInfo: Optional[GoogleCloudChannelV1ContactInfo] = Field(
        None, description='Primary contact info.'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Time when the customer was updated.'
    )


class GoogleCloudChannelV1ListCustomersResponse(BaseModel):
    customers: Optional[List[GoogleCloudChannelV1Customer]] = Field(
        None, description='The customers belonging to a reseller or distributor.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. Pass to ListCustomersRequest.page_token to obtain that page.',
    )


class GoogleCloudChannelV1ListReportsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Pass this token to FetchReportResultsRequest.page_token to retrieve the next page of results.',
    )
    reports: Optional[List[GoogleCloudChannelV1Report]] = Field(
        None, description='The reports available to the partner.'
    )


class GoogleCloudChannelV1MarketingInfo(BaseModel):
    defaultLogo: Optional[GoogleCloudChannelV1Media] = Field(
        None, description='Default logo.'
    )
    description: Optional[str] = Field(
        None, description='Human readable description. Description can contain HTML.'
    )
    displayName: Optional[str] = Field(None, description='Human readable name.')


class GoogleCloudChannelV1Parameter(BaseModel):
    editable: Optional[bool] = Field(
        None,
        description='Output only. Specifies whether this parameter is allowed to be changed. For example, for a Google Workspace Business Starter entitlement in commitment plan, num_units is editable when entitlement is active.',
    )
    name: Optional[str] = Field(None, description='Name of the parameter.')
    value: Optional[GoogleCloudChannelV1Value] = Field(
        None, description='Value of the parameter.'
    )


class GoogleCloudChannelV1ParameterDefinition(BaseModel):
    allowedValues: Optional[List[GoogleCloudChannelV1Value]] = Field(
        None,
        description='If not empty, parameter values must be drawn from this list. For example, [us-west1, us-west2, ...] Applicable to STRING parameter type.',
    )
    maxValue: Optional[GoogleCloudChannelV1Value] = Field(
        None,
        description='Maximum value of the parameter, if applicable. Inclusive. For example, maximum seats when purchasing Google Workspace Business Standard. Applicable to INT64 and DOUBLE parameter types.',
    )
    minValue: Optional[GoogleCloudChannelV1Value] = Field(
        None,
        description='Minimal value of the parameter, if applicable. Inclusive. For example, minimal commitment when purchasing Anthos is 0.01. Applicable to INT64 and DOUBLE parameter types.',
    )
    name: Optional[str] = Field(None, description='Name of the parameter.')
    optional: Optional[bool] = Field(
        None,
        description='If set to true, parameter is optional to purchase this Offer.',
    )
    parameterType: Optional[ParameterType] = Field(
        None,
        description='Data type of the parameter. Minimal value, Maximum value and allowed values will use specified data type here.',
    )


class GoogleCloudChannelV1PercentageAdjustment(BaseModel):
    percentage: Optional[GoogleTypeDecimal] = Field(
        None,
        description='The percentage of the bill to adjust. For example: Mark down by 1% => "-1.00" Mark up by 1% => "1.00" Pass-Through => "0.00"',
    )


class GoogleCloudChannelV1Price(BaseModel):
    basePrice: Optional[GoogleTypeMoney] = Field(None, description='Base price.')
    discount: Optional[float] = Field(
        None,
        description='Discount percentage, represented as decimal. For example, a 20% discount will be represent as 0.2.',
    )
    effectivePrice: Optional[GoogleTypeMoney] = Field(
        None, description='Effective Price after applying the discounts.'
    )
    externalPriceUri: Optional[str] = Field(
        None,
        description='Link to external price list, such as link to Google Voice rate card.',
    )


class GoogleCloudChannelV1PriceTier(BaseModel):
    firstResource: Optional[int] = Field(
        None, description='First resource for which the tier price applies.'
    )
    lastResource: Optional[int] = Field(
        None, description='Last resource for which the tier price applies.'
    )
    price: Optional[GoogleCloudChannelV1Price] = Field(
        None, description='Price of the tier.'
    )


class GoogleCloudChannelV1Product(BaseModel):
    marketingInfo: Optional[GoogleCloudChannelV1MarketingInfo] = Field(
        None, description='Marketing information for the product.'
    )
    name: Optional[str] = Field(
        None, description='Resource Name of the Product. Format: products/{product_id}'
    )


class GoogleCloudChannelV1ProvisionCloudIdentityRequest(BaseModel):
    cloudIdentityInfo: Optional[GoogleCloudChannelV1CloudIdentityInfo] = Field(
        None, description='CloudIdentity-specific customer information.'
    )
    user: Optional[GoogleCloudChannelV1AdminUser] = Field(
        None, description='Admin user information.'
    )
    validateOnly: Optional[bool] = Field(
        None,
        description='Validate the request and preview the review, but do not post it.',
    )


class GoogleCloudChannelV1ReportJob(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Required. The resource name of a report job. Name uses the format: `accounts/{account_id}/reportJobs/{report_job_id}`',
    )
    reportStatus: Optional[GoogleCloudChannelV1ReportStatus] = Field(
        None, description='The current status of report generation.'
    )


class GoogleCloudChannelV1RepricingAdjustment(BaseModel):
    percentageAdjustment: Optional[GoogleCloudChannelV1PercentageAdjustment] = Field(
        None, description='Flat markup or markdown on an entire bill.'
    )


class GoogleCloudChannelV1RepricingCondition(BaseModel):
    skuGroupCondition: Optional[GoogleCloudChannelV1SkuGroupCondition] = Field(
        None, description='SKU Group condition for override.'
    )


class GoogleCloudChannelV1Sku(BaseModel):
    marketingInfo: Optional[GoogleCloudChannelV1MarketingInfo] = Field(
        None, description='Marketing information for the SKU.'
    )
    name: Optional[str] = Field(
        None,
        description='Resource Name of the SKU. Format: products/{product_id}/skus/{sku_id}',
    )
    product: Optional[GoogleCloudChannelV1Product] = Field(
        None, description='Product the SKU is associated with.'
    )


class GoogleCloudChannelV1TransferableSku(BaseModel):
    legacySku: Optional[GoogleCloudChannelV1Sku] = Field(
        None,
        description='Optional. The customer to transfer has an entitlement with the populated legacy SKU.',
    )
    sku: Optional[GoogleCloudChannelV1Sku] = Field(
        None,
        description='The SKU pertaining to the provisioning resource as specified in the Offer.',
    )
    transferEligibility: Optional[GoogleCloudChannelV1TransferEligibility] = Field(
        None, description='Describes the transfer eligibility of a SKU.'
    )


class GoogleCloudChannelV1alpha1CommitmentSettings(BaseModel):
    endTime: Optional[str] = Field(
        None, description='Output only. Commitment end timestamp.'
    )
    renewalSettings: Optional[GoogleCloudChannelV1alpha1RenewalSettings] = Field(
        None,
        description='Optional. Renewal settings applicable for a commitment-based Offer.',
    )
    startTime: Optional[str] = Field(
        None, description='Output only. Commitment start timestamp.'
    )


class GoogleCloudChannelV1alpha1Parameter(BaseModel):
    editable: Optional[bool] = Field(
        None,
        description='Output only. Specifies whether this parameter is allowed to be changed. For example, for a Google Workspace Business Starter entitlement in commitment plan, num_units is editable when entitlement is active.',
    )
    name: Optional[str] = Field(None, description='Name of the parameter.')
    value: Optional[GoogleCloudChannelV1alpha1Value] = Field(
        None, description='Value of the parameter.'
    )


class GoogleCloudChannelV1alpha1ReportJob(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Required. The resource name of a report job. Name uses the format: `accounts/{account_id}/reportJobs/{report_job_id}`',
    )
    reportStatus: Optional[GoogleCloudChannelV1alpha1ReportStatus] = Field(
        None, description='The current status of report generation.'
    )


class GoogleLongrunningOperation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class GoogleTypeDateTime(BaseModel):
    day: Optional[int] = Field(
        None,
        description='Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.',
    )
    hours: Optional[int] = Field(
        None,
        description='Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value "24:00:00" for scenarios like business closing time.',
    )
    minutes: Optional[int] = Field(
        None,
        description='Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.',
    )
    month: Optional[int] = Field(
        None,
        description='Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.',
    )
    nanos: Optional[int] = Field(
        None,
        description='Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.',
    )
    seconds: Optional[int] = Field(
        None,
        description='Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.',
    )
    timeZone: Optional[GoogleTypeTimeZone] = Field(None, description='Time zone.')
    utcOffset: Optional[str] = Field(
        None,
        description='UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.',
    )
    year: Optional[int] = Field(
        None,
        description='Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.',
    )


class GoogleCloudChannelV1ChangeOfferRequest(BaseModel):
    offer: Optional[str] = Field(
        None,
        description='Required. New Offer. Format: accounts/{account_id}/offers/{offer_id}.',
    )
    parameters: Optional[List[GoogleCloudChannelV1Parameter]] = Field(
        None,
        description='Optional. Parameters needed to purchase the Offer. To view the available Parameters refer to the Offer.parameter_definitions from the desired offer.',
    )
    purchaseOrderId: Optional[str] = Field(
        None, description='Optional. Purchase order id provided by the reseller.'
    )
    requestId: Optional[str] = Field(
        None,
        description="Optional. You can specify an optional unique request ID, and if you need to retry your request, the server will know to ignore the request if it's complete. For example, you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if it received the original operation with the same request ID. If it did, it will ignore the second request. The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122) with the exception that zero UUID is not supported (`00000000-0000-0000-0000-000000000000`).",
    )


class GoogleCloudChannelV1ChangeParametersRequest(BaseModel):
    parameters: Optional[List[GoogleCloudChannelV1Parameter]] = Field(
        None,
        description='Required. Entitlement parameters to update. You can only change editable parameters. To view the available Parameters for a request, refer to the Offer.parameter_definitions from the desired offer.',
    )
    purchaseOrderId: Optional[str] = Field(
        None, description='Optional. Purchase order ID provided by the reseller.'
    )
    requestId: Optional[str] = Field(
        None,
        description="Optional. You can specify an optional unique request ID, and if you need to retry your request, the server will know to ignore the request if it's complete. For example, you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if it received the original operation with the same request ID. If it did, it will ignore the second request. The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122) with the exception that zero UUID is not supported (`00000000-0000-0000-0000-000000000000`).",
    )


class GoogleCloudChannelV1ChannelPartnerLink(BaseModel):
    channelPartnerCloudIdentityInfo: Optional[GoogleCloudChannelV1CloudIdentityInfo] = (
        Field(
            None,
            description='Output only. Cloud Identity info of the channel partner (IR).',
        )
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp of when the channel partner link is created.',
    )
    inviteLinkUri: Optional[str] = Field(
        None,
        description='Output only. URI of the web page where partner accepts the link invitation.',
    )
    linkState: Optional[LinkState] = Field(
        None, description='Required. State of the channel partner link.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. Resource name for the channel partner link, in the format accounts/{account_id}/channelPartnerLinks/{id}.',
    )
    publicId: Optional[str] = Field(
        None,
        description='Output only. Public identifier that a customer must use to generate a transfer token to move to this distributor-reseller combination.',
    )
    resellerCloudIdentityId: Optional[str] = Field(
        None, description='Required. Cloud Identity ID of the linked reseller.'
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp of when the channel partner link is updated.',
    )


class GoogleCloudChannelV1ConditionalOverride(BaseModel):
    adjustment: Optional[GoogleCloudChannelV1RepricingAdjustment] = Field(
        None,
        description="Required. Information about the applied override's adjustment.",
    )
    rebillingBasis: Optional[RebillingBasis] = Field(
        None,
        description='Required. The RebillingBasis to use for the applied override. Shows the relative cost based on your repricing costs.',
    )
    repricingCondition: Optional[GoogleCloudChannelV1RepricingCondition] = Field(
        None,
        description='Required. Specifies the condition which, if met, will apply the override.',
    )


class GoogleCloudChannelV1DateRange(BaseModel):
    invoiceEndDate: Optional[GoogleTypeDate] = Field(
        None,
        description='The latest invoice date (exclusive). If your product uses monthly invoices, and this value is not the beginning of a month, this will adjust the date to the first day of the following month.',
    )
    invoiceStartDate: Optional[GoogleTypeDate] = Field(
        None,
        description='The earliest invoice date (inclusive). If your product uses monthly invoices, and this value is not the beginning of a month, this will adjust the date to the first day of the given month.',
    )
    usageEndDateTime: Optional[GoogleTypeDateTime] = Field(
        None,
        description='The latest usage date time (exclusive). If you use time groupings (daily, weekly, etc), each group uses midnight to midnight (Pacific time). The usage end date is rounded down to include all usage from the specified date. We recommend that clients pass `usage_start_date_time` in Pacific time.',
    )
    usageStartDateTime: Optional[GoogleTypeDateTime] = Field(
        None,
        description='The earliest usage date time (inclusive). If you use time groupings (daily, weekly, etc), each group uses midnight to midnight (Pacific time). The usage start date is rounded down to include all usage from the specified date. We recommend that clients pass `usage_start_date_time` in Pacific time.',
    )


class GoogleCloudChannelV1Entitlement(BaseModel):
    associationInfo: Optional[GoogleCloudChannelV1AssociationInfo] = Field(
        None, description='Association information to other entitlements.'
    )
    commitmentSettings: Optional[GoogleCloudChannelV1CommitmentSettings] = Field(
        None,
        description='Commitment settings for a commitment-based Offer. Required for commitment based offers.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time at which the entitlement is created.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. Resource name of an entitlement in the form: accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}.',
    )
    offer: Optional[str] = Field(
        None,
        description='Required. The offer resource name for which the entitlement is to be created. Takes the form: accounts/{account_id}/offers/{offer_id}.',
    )
    parameters: Optional[List[GoogleCloudChannelV1Parameter]] = Field(
        None,
        description='Extended entitlement parameters. When creating an entitlement, valid parameter names and values are defined in the Offer.parameter_definitions. For Google Workspace, the following Parameters may be accepted as input: - max_units: The maximum assignable units for a flexible offer OR - num_units: The total commitment for commitment-based offers The response may additionally include the following output-only Parameters: - assigned_units: The number of licenses assigned to users. For GCP billing subaccounts, the following Parameter may be accepted as input: - display_name: The display name of the billing subaccount.',
    )
    provisionedService: Optional[GoogleCloudChannelV1ProvisionedService] = Field(
        None,
        description='Output only. Service provisioning details for the entitlement.',
    )
    provisioningState: Optional[ProvisioningState] = Field(
        None, description='Output only. Current provisioning state of the entitlement.'
    )
    purchaseOrderId: Optional[str] = Field(
        None,
        description='Optional. This purchase order (PO) information is for resellers to use for their company tracking usage. If a purchaseOrderId value is given, it appears in the API responses and shows up in the invoice. The property accepts up to 80 plain text characters. This is only supported for Google Workspace entitlements.',
    )
    suspensionReasons: Optional[List[SuspensionReason]] = Field(
        None,
        description='Output only. Enumerable of all current suspension reasons for an entitlement.',
    )
    trialSettings: Optional[GoogleCloudChannelV1TrialSettings] = Field(
        None, description='Output only. Settings for trial offers.'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time at which the entitlement is updated.'
    )


class GoogleCloudChannelV1EntitlementChange(BaseModel):
    activationReason: Optional[ActivationReason] = Field(
        None, description="The Entitlement's activation reason"
    )
    cancellationReason: Optional[CancellationReason] = Field(
        None, description='Cancellation reason for the Entitlement.'
    )
    changeType: Optional[ChangeType] = Field(
        None, description='The change action type.'
    )
    createTime: Optional[str] = Field(
        None, description='The submitted time of the change.'
    )
    entitlement: Optional[str] = Field(
        None,
        description='Required. Resource name of an entitlement in the form: accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}',
    )
    offer: Optional[str] = Field(
        None,
        description='Required. Resource name of the Offer at the time of change. Takes the form: accounts/{account_id}/offers/{offer_id}.',
    )
    operator: Optional[str] = Field(
        None,
        description="Human-readable identifier that shows what operator made a change. When the operator_type is RESELLER, this is the user's email address. For all other operator types, this is empty.",
    )
    operatorType: Optional[OperatorType] = Field(
        None, description='Operator type responsible for the change.'
    )
    otherChangeReason: Optional[str] = Field(
        None, description='e.g. purchase_number change reason, entered by CRS.'
    )
    parameters: Optional[List[GoogleCloudChannelV1Parameter]] = Field(
        None,
        description='Extended parameters, such as: purchase_order_number, gcp_details; internal_correlation_id, long_running_operation_id, order_id; etc.',
    )
    provisionedService: Optional[GoogleCloudChannelV1ProvisionedService] = Field(
        None, description='Service provisioned for an Entitlement.'
    )
    suspensionReason: Optional[SuspensionReason] = Field(
        None, description='Suspension reason for the Entitlement.'
    )


class GoogleCloudChannelV1ListChannelPartnerLinksResponse(BaseModel):
    channelPartnerLinks: Optional[List[GoogleCloudChannelV1ChannelPartnerLink]] = Field(
        None, description='The Channel partner links for a reseller.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. Pass to ListChannelPartnerLinksRequest.page_token to obtain that page.',
    )


class GoogleCloudChannelV1ListEntitlementChangesResponse(BaseModel):
    entitlementChanges: Optional[List[GoogleCloudChannelV1EntitlementChange]] = Field(
        None, description='The list of entitlement changes.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='A token to list the next page of results.'
    )


class GoogleCloudChannelV1ListEntitlementsResponse(BaseModel):
    entitlements: Optional[List[GoogleCloudChannelV1Entitlement]] = Field(
        None, description="The reseller customer's entitlements."
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to list the next page of results. Pass to ListEntitlementsRequest.page_token to obtain that page.',
    )


class GoogleCloudChannelV1ListProductsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='A token to retrieve the next page of results.'
    )
    products: Optional[List[GoogleCloudChannelV1Product]] = Field(
        None, description='List of Products requested.'
    )


class GoogleCloudChannelV1ListSkusResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='A token to retrieve the next page of results.'
    )
    skus: Optional[List[GoogleCloudChannelV1Sku]] = Field(
        None, description='The list of SKUs requested.'
    )


class GoogleCloudChannelV1ListTransferableSkusResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. Pass to ListTransferableSkusRequest.page_token to obtain that page.',
    )
    transferableSkus: Optional[List[GoogleCloudChannelV1TransferableSku]] = Field(
        None,
        description='Information about existing SKUs for a customer that needs a transfer.',
    )


class GoogleCloudChannelV1PricePhase(BaseModel):
    firstPeriod: Optional[int] = Field(
        None, description='Defines first period for the phase.'
    )
    lastPeriod: Optional[int] = Field(
        None, description='Defines first period for the phase.'
    )
    periodType: Optional[PeriodType] = Field(
        None, description='Defines the phase period type.'
    )
    price: Optional[GoogleCloudChannelV1Price] = Field(
        None, description='Price of the phase. Present if there are no price tiers.'
    )
    priceTiers: Optional[List[GoogleCloudChannelV1PriceTier]] = Field(
        None, description='Price by the resource tiers.'
    )


class GoogleCloudChannelV1PurchasableSku(BaseModel):
    sku: Optional[GoogleCloudChannelV1Sku] = Field(None, description='SKU')


class GoogleCloudChannelV1ReportResultsMetadata(BaseModel):
    dateRange: Optional[GoogleCloudChannelV1DateRange] = Field(
        None, description='The date range of reported usage.'
    )
    precedingDateRange: Optional[GoogleCloudChannelV1DateRange] = Field(
        None,
        description='The usage dates immediately preceding `date_range` with the same duration. Use this to calculate trending usage and costs. This is only populated if you request trending data. For example, if `date_range` is July 1-15, `preceding_date_range` will be June 16-30.',
    )
    report: Optional[GoogleCloudChannelV1Report] = Field(
        None, description='Details of the completed report.'
    )
    rowCount: Optional[str] = Field(
        None, description='The total number of rows of data in the final report.'
    )


class GoogleCloudChannelV1ReportValue(BaseModel):
    dateTimeValue: Optional[GoogleTypeDateTime] = Field(
        None,
        description='A value of type `google.type.DateTime` (year, month, day, hour, minute, second, and UTC offset or timezone.)',
    )
    dateValue: Optional[GoogleTypeDate] = Field(
        None, description='A value of type `google.type.Date` (year, month, day).'
    )
    decimalValue: Optional[GoogleTypeDecimal] = Field(
        None,
        description='A value of type `google.type.Decimal`, representing non-integer numeric values.',
    )
    intValue: Optional[str] = Field(None, description='A value of type `int`.')
    moneyValue: Optional[GoogleTypeMoney] = Field(
        None,
        description='A value of type `google.type.Money` (currency code, whole units, decimal units).',
    )
    stringValue: Optional[str] = Field(None, description='A value of type `string`.')


class GoogleCloudChannelV1RepricingConfig(BaseModel):
    adjustment: Optional[GoogleCloudChannelV1RepricingAdjustment] = Field(
        None, description='Required. Information about the adjustment.'
    )
    channelPartnerGranularity: Optional[
        GoogleCloudChannelV1RepricingConfigChannelPartnerGranularity
    ] = Field(
        None,
        description='Applies the repricing configuration at the channel partner level. This is the only supported value for ChannelPartnerRepricingConfig.',
    )
    conditionalOverrides: Optional[List[GoogleCloudChannelV1ConditionalOverride]] = (
        Field(
            None,
            description="The conditional overrides to apply for this configuration. If you list multiple overrides, only the first valid override is used. If you don't list any overrides, the API uses the normal adjustment and rebilling basis.",
        )
    )
    effectiveInvoiceMonth: Optional[GoogleTypeDate] = Field(
        None,
        description='Required. The YearMonth when these adjustments activate. The Day field needs to be "0" since we only accept YearMonth repricing boundaries.',
    )
    entitlementGranularity: Optional[
        GoogleCloudChannelV1RepricingConfigEntitlementGranularity
    ] = Field(
        None,
        description='Applies the repricing configuration at the entitlement level. This is the only supported value for CustomerRepricingConfig.',
    )
    rebillingBasis: Optional[RebillingBasis] = Field(
        None,
        description='Required. The RebillingBasis to use for this bill. Specifies the relative cost based on repricing costs you will apply.',
    )


class GoogleCloudChannelV1Row(BaseModel):
    values: Optional[List[GoogleCloudChannelV1ReportValue]] = Field(
        None, description='The list of values in the row.'
    )


class GoogleCloudChannelV1RunReportJobRequest(BaseModel):
    dateRange: Optional[GoogleCloudChannelV1DateRange] = Field(
        None,
        description='Optional. The range of usage or invoice dates to include in the result.',
    )
    filter: Optional[str] = Field(
        None,
        description='Optional. A structured string that defines conditions on dimension columns to restrict the report output. Filters support logical operators (AND, OR, NOT) and conditional operators (=, !=, <, >, <=, and >=) using `column_id` as keys. For example: `(customer:"accounts/C123abc/customers/S456def" OR customer:"accounts/C123abc/customers/S789ghi") AND invoice_start_date.year >= 2022`',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Optional. The BCP-47 language code, such as "en-US". If specified, the response is localized to the corresponding language code if the original data sources support it. Default is "en-US".',
    )


class GoogleCloudChannelV1RunReportJobResponse(BaseModel):
    reportJob: Optional[GoogleCloudChannelV1ReportJob] = Field(
        None,
        description="Pass `report_job.name` to FetchReportResultsRequest.report_job to retrieve the report's results.",
    )
    reportMetadata: Optional[GoogleCloudChannelV1ReportResultsMetadata] = Field(
        None,
        description="The metadata for the report's results (display name, columns, row count, and date range). If you view this before the operation finishes, you may see incomplete data.",
    )


class GoogleCloudChannelV1TransferEntitlementsRequest(BaseModel):
    authToken: Optional[str] = Field(
        None,
        description='The super admin of the resold customer generates this token to authorize a reseller to access their Cloud Identity and purchase entitlements on their behalf. You can omit this token after authorization. See https://support.google.com/a/answer/7643790 for more details.',
    )
    entitlements: Optional[List[GoogleCloudChannelV1Entitlement]] = Field(
        None, description='Required. The new entitlements to create or transfer.'
    )
    requestId: Optional[str] = Field(
        None,
        description="Optional. You can specify an optional unique request ID, and if you need to retry your request, the server will know to ignore the request if it's complete. For example, you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if it received the original operation with the same request ID. If it did, it will ignore the second request. The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122) with the exception that zero UUID is not supported (`00000000-0000-0000-0000-000000000000`).",
    )


class GoogleCloudChannelV1TransferEntitlementsResponse(BaseModel):
    entitlements: Optional[List[GoogleCloudChannelV1Entitlement]] = Field(
        None, description='The transferred entitlements.'
    )


class GoogleCloudChannelV1TransferEntitlementsToGoogleRequest(BaseModel):
    entitlements: Optional[List[GoogleCloudChannelV1Entitlement]] = Field(
        None, description='Required. The entitlements to transfer to Google.'
    )
    requestId: Optional[str] = Field(
        None,
        description="Optional. You can specify an optional unique request ID, and if you need to retry your request, the server will know to ignore the request if it's complete. For example, you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if it received the original operation with the same request ID. If it did, it will ignore the second request. The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122) with the exception that zero UUID is not supported (`00000000-0000-0000-0000-000000000000`).",
    )


class GoogleCloudChannelV1UpdateChannelPartnerLinkRequest(BaseModel):
    channelPartnerLink: Optional[GoogleCloudChannelV1ChannelPartnerLink] = Field(
        None,
        description='Required. The channel partner link to update. Only channel_partner_link.link_state is allowed for updates.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='Required. The update mask that applies to the resource. The only allowable value for an update mask is channel_partner_link.link_state.',
    )


class GoogleCloudChannelV1alpha1DateRange(BaseModel):
    invoiceEndDate: Optional[GoogleTypeDate] = Field(
        None,
        description='The latest invoice date (exclusive). If your product uses monthly invoices, and this value is not the beginning of a month, this will adjust the date to the first day of the following month.',
    )
    invoiceStartDate: Optional[GoogleTypeDate] = Field(
        None,
        description='The earliest invoice date (inclusive). If your product uses monthly invoices, and this value is not the beginning of a month, this will adjust the date to the first day of the given month.',
    )
    usageEndDateTime: Optional[GoogleTypeDateTime] = Field(
        None,
        description='The latest usage date time (exclusive). If you use time groupings (daily, weekly, etc), each group uses midnight to midnight (Pacific time). The usage end date is rounded down to include all usage from the specified date. We recommend that clients pass `usage_start_date_time` in Pacific time.',
    )
    usageStartDateTime: Optional[GoogleTypeDateTime] = Field(
        None,
        description='The earliest usage date time (inclusive). If you use time groupings (daily, weekly, etc), each group uses midnight to midnight (Pacific time). The usage start date is rounded down to include all usage from the specified date. We recommend that clients pass `usage_start_date_time` in Pacific time.',
    )


class GoogleCloudChannelV1alpha1Entitlement(BaseModel):
    assignedUnits: Optional[int] = Field(
        None,
        description='The current number of users that are assigned a license for the product defined in provisioned_service.skuId. Read-only. Deprecated: Use `parameters` instead.',
    )
    associationInfo: Optional[GoogleCloudChannelV1alpha1AssociationInfo] = Field(
        None, description='Association information to other entitlements.'
    )
    channelPartnerId: Optional[str] = Field(
        None,
        description="Cloud Identity ID of a channel partner who will be the direct reseller for the customer's order. This field is generally used in 2-tier ordering, where the order is placed by a top-level distributor on behalf of their channel partner or reseller. Required for distributors. Deprecated: `channel_partner_id` has been moved to the Customer.",
    )
    commitmentSettings: Optional[GoogleCloudChannelV1alpha1CommitmentSettings] = Field(
        None,
        description='Commitment settings for a commitment-based Offer. Required for commitment based offers.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time at which the entitlement is created.'
    )
    maxUnits: Optional[int] = Field(
        None,
        description='Maximum number of units for a non commitment-based Offer, such as Flexible, Trial or Free entitlements. For commitment-based entitlements, this is a read-only field, which only the internal support team can update. Deprecated: Use `parameters` instead.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. Resource name of an entitlement in the form: accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}.',
    )
    numUnits: Optional[int] = Field(
        None,
        description='Number of units for a commitment-based Offer. For example, for seat-based Offers, this would be the number of seats; for license-based Offers, this would be the number of licenses. Required for creating commitment-based Offers. Deprecated: Use `parameters` instead.',
    )
    offer: Optional[str] = Field(
        None,
        description='Required. The offer resource name for which the entitlement is to be created. Takes the form: accounts/{account_id}/offers/{offer_id}.',
    )
    parameters: Optional[List[GoogleCloudChannelV1alpha1Parameter]] = Field(
        None,
        description='Extended entitlement parameters. When creating an entitlement, valid parameter names and values are defined in the Offer.parameter_definitions. For Google Workspace, the following Parameters may be accepted as input: - max_units: The maximum assignable units for a flexible offer OR - num_units: The total commitment for commitment-based offers The response may additionally include the following output-only Parameters: - assigned_units: The number of licenses assigned to users. For GCP billing subaccounts, the following Parameter may be accepted as input: - display_name: The display name of the billing subaccount.',
    )
    provisionedService: Optional[GoogleCloudChannelV1alpha1ProvisionedService] = Field(
        None,
        description='Output only. Service provisioning details for the entitlement.',
    )
    provisioningState: Optional[ProvisioningState1] = Field(
        None, description='Output only. Current provisioning state of the entitlement.'
    )
    purchaseOrderId: Optional[str] = Field(
        None,
        description='Optional. This purchase order (PO) information is for resellers to use for their company tracking usage. If a purchaseOrderId value is given, it appears in the API responses and shows up in the invoice. The property accepts up to 80 plain text characters. This is only supported for Google Workspace entitlements.',
    )
    suspensionReasons: Optional[List[SuspensionReason]] = Field(
        None,
        description='Output only. Enumerable of all current suspension reasons for an entitlement.',
    )
    trialSettings: Optional[GoogleCloudChannelV1alpha1TrialSettings] = Field(
        None, description='Output only. Settings for trial offers.'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time at which the entitlement is updated.'
    )


class GoogleCloudChannelV1alpha1ReportResultsMetadata(BaseModel):
    dateRange: Optional[GoogleCloudChannelV1alpha1DateRange] = Field(
        None, description='The date range of reported usage.'
    )
    precedingDateRange: Optional[GoogleCloudChannelV1alpha1DateRange] = Field(
        None,
        description='The usage dates immediately preceding `date_range` with the same duration. Use this to calculate trending usage and costs. This is only populated if you request trending data. For example, if `date_range` is July 1-15, `preceding_date_range` will be June 16-30.',
    )
    report: Optional[GoogleCloudChannelV1alpha1Report] = Field(
        None, description='Details of the completed report.'
    )
    rowCount: Optional[str] = Field(
        None, description='The total number of rows of data in the final report.'
    )


class GoogleCloudChannelV1alpha1RunReportJobResponse(BaseModel):
    reportJob: Optional[GoogleCloudChannelV1alpha1ReportJob] = Field(
        None,
        description="Pass `report_job.name` to FetchReportResultsRequest.report_job to retrieve the report's results.",
    )
    reportMetadata: Optional[GoogleCloudChannelV1alpha1ReportResultsMetadata] = Field(
        None,
        description="The metadata for the report's results (display name, columns, row count, and date range). If you view this before the operation finishes, you may see incomplete data.",
    )


class GoogleCloudChannelV1alpha1TransferEntitlementsResponse(BaseModel):
    entitlements: Optional[List[GoogleCloudChannelV1alpha1Entitlement]] = Field(
        None, description='The transferred entitlements.'
    )


class GoogleLongrunningListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[GoogleLongrunningOperation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class GoogleCloudChannelV1ChannelPartnerRepricingConfig(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Output only. Resource name of the ChannelPartnerRepricingConfig. Format: accounts/{account_id}/channelPartnerLinks/{channel_partner_id}/channelPartnerRepricingConfigs/{id}.',
    )
    repricingConfig: Optional[GoogleCloudChannelV1RepricingConfig] = Field(
        None,
        description='Required. The configuration for bill modifications made by a reseller before sending it to ChannelPartner.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp of an update to the repricing rule. If `update_time` is after RepricingConfig.effective_invoice_month then it indicates this was set mid-month.',
    )


class GoogleCloudChannelV1CreateEntitlementRequest(BaseModel):
    entitlement: Optional[GoogleCloudChannelV1Entitlement] = Field(
        None, description='Required. The entitlement to create.'
    )
    requestId: Optional[str] = Field(
        None,
        description="Optional. You can specify an optional unique request ID, and if you need to retry your request, the server will know to ignore the request if it's complete. For example, you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if it received the original operation with the same request ID. If it did, it will ignore the second request. The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122) with the exception that zero UUID is not supported (`00000000-0000-0000-0000-000000000000`).",
    )


class GoogleCloudChannelV1CustomerRepricingConfig(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Output only. Resource name of the CustomerRepricingConfig. Format: accounts/{account_id}/customers/{customer_id}/customerRepricingConfigs/{id}.',
    )
    repricingConfig: Optional[GoogleCloudChannelV1RepricingConfig] = Field(
        None,
        description='Required. The configuration for bill modifications made by a reseller before sending it to customers.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. Timestamp of an update to the repricing rule. If `update_time` is after RepricingConfig.effective_invoice_month then it indicates this was set mid-month.',
    )


class GoogleCloudChannelV1FetchReportResultsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Pass this token to FetchReportResultsRequest.page_token to retrieve the next page of results.',
    )
    reportMetadata: Optional[GoogleCloudChannelV1ReportResultsMetadata] = Field(
        None,
        description='The metadata for the report results (display name, columns, row count, and date ranges).',
    )
    rows: Optional[List[GoogleCloudChannelV1Row]] = Field(
        None,
        description="The report's lists of values. Each row follows the settings and ordering of the columns from `report_metadata`.",
    )


class GoogleCloudChannelV1ListChannelPartnerRepricingConfigsResponse(BaseModel):
    channelPartnerRepricingConfigs: Optional[
        List[GoogleCloudChannelV1ChannelPartnerRepricingConfig]
    ] = Field(None, description='The repricing configs for this channel partner.')
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. Pass to ListChannelPartnerRepricingConfigsRequest.page_token to obtain that page.',
    )


class GoogleCloudChannelV1ListCustomerRepricingConfigsResponse(BaseModel):
    customerRepricingConfigs: Optional[
        List[GoogleCloudChannelV1CustomerRepricingConfig]
    ] = Field(None, description='The repricing configs for this channel partner.')
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. Pass to ListCustomerRepricingConfigsRequest.page_token to obtain that page.',
    )


class GoogleCloudChannelV1ListPurchasableSkusResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='A token to retrieve the next page of results.'
    )
    purchasableSkus: Optional[List[GoogleCloudChannelV1PurchasableSku]] = Field(
        None, description='The list of SKUs requested.'
    )


class GoogleCloudChannelV1PriceByResource(BaseModel):
    price: Optional[GoogleCloudChannelV1Price] = Field(
        None, description='Price of the Offer. Present if there are no price phases.'
    )
    pricePhases: Optional[List[GoogleCloudChannelV1PricePhase]] = Field(
        None, description='Specifies the price by time range.'
    )
    resourceType: Optional[ResourceType] = Field(
        None, description='Resource Type. Example: SEAT'
    )


class GoogleCloudChannelV1Offer(BaseModel):
    constraints: Optional[GoogleCloudChannelV1Constraints] = Field(
        None, description='Constraints on transacting the Offer.'
    )
    dealCode: Optional[str] = Field(
        None,
        description='The deal code of the offer to get a special promotion or discount.',
    )
    endTime: Optional[str] = Field(
        None, description='Output only. End of the Offer validity time.'
    )
    marketingInfo: Optional[GoogleCloudChannelV1MarketingInfo] = Field(
        None, description='Marketing information for the Offer.'
    )
    name: Optional[str] = Field(
        None,
        description='Resource Name of the Offer. Format: accounts/{account_id}/offers/{offer_id}',
    )
    parameterDefinitions: Optional[List[GoogleCloudChannelV1ParameterDefinition]] = (
        Field(None, description='Parameters required to use current Offer to purchase.')
    )
    plan: Optional[GoogleCloudChannelV1Plan] = Field(
        None, description='Describes the payment plan for the Offer.'
    )
    priceByResources: Optional[List[GoogleCloudChannelV1PriceByResource]] = Field(
        None, description='Price for each monetizable resource type.'
    )
    sku: Optional[GoogleCloudChannelV1Sku] = Field(
        None, description='SKU the offer is associated with.'
    )
    startTime: Optional[str] = Field(
        None, description='Start of the Offer validity time.'
    )


class GoogleCloudChannelV1PurchasableOffer(BaseModel):
    offer: Optional[GoogleCloudChannelV1Offer] = Field(None, description='Offer.')


class GoogleCloudChannelV1TransferableOffer(BaseModel):
    offer: Optional[GoogleCloudChannelV1Offer] = Field(
        None,
        description='Offer with parameter constraints updated to allow the Transfer.',
    )


class GoogleCloudChannelV1ListOffersResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='A token to retrieve the next page of results.'
    )
    offers: Optional[List[GoogleCloudChannelV1Offer]] = Field(
        None, description='The list of Offers requested.'
    )


class GoogleCloudChannelV1ListPurchasableOffersResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='A token to retrieve the next page of results.'
    )
    purchasableOffers: Optional[List[GoogleCloudChannelV1PurchasableOffer]] = Field(
        None, description='The list of Offers requested.'
    )


class GoogleCloudChannelV1ListTransferableOffersResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. Pass to ListTransferableOffersRequest.page_token to obtain that page.',
    )
    transferableOffers: Optional[List[GoogleCloudChannelV1TransferableOffer]] = Field(
        None,
        description='Information about Offers for a customer that can be used for transfer.',
    )
